import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from dotenv import load_dotenv
import nest_asyncio
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
COMPANY_NAME, COMPANY_DESCRIPTION, COMPANY_WEBSITE = range(3)

# –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
BANNED_WORDS = ['–∫–∞–∑–∏–Ω–æ', '18+', '–ø–æ—Ä–Ω–æ', '—ç—Ä–æ—Ç–∏–∫–∞', '–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞']


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data='post_job')],
        [InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='restart')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
    ])


def start_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data='start')]])


def back_button_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]])


def help_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", url='https://t.me/Chessvord')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ])


# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=start_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'start':
        await query.message.reply_text(
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π \"–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –ø–ª—è–∂–µüí∏üí∏üí∏ –í–∞–∫–∞–Ω—Å–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\".\n"
            "–Ø –º–æ–≥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –∫–∞–Ω–∞–ª. –ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ?",
            reply_markup=main_menu_keyboard()
        )

    elif query.data == 'post_job':
        job_example = """
üì¢ –ü—Ä–∏–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏:

**–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏**: –û–û–û ¬´–ö—Ä–∞–Ω–µ–∫—Å-–ö–ª–∞–±¬ª
üìç **–ì–æ—Ä–æ–¥**: –ú–æ—Å–∫–≤–∞
üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å**: —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç
üí∞ **–ó–∞—Ä–ø–ª–∞—Ç–∞**: –æ—Ç 100 000 —Ä—É–±. –≤ –º–µ—Å—è—Ü
üïí **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã**: –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
üìÖ **–¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç**: –æ—Ç 3 –ª–µ—Ç
üìã **–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏**:
- –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ –ª–µ—á–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
- –í–µ–¥–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

üìß **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏**: hr@kranex-club.ru

–õ–∏–º–∏—Ç —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚Äî 2000 —Å–∏–º–≤–æ–ª–æ–≤.
"""
        await query.message.reply_text(job_example)
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=back_button_keyboard())
        return COMPANY_NAME

    elif query.data == 'help':
        help_text = """
–ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:
1. –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
2. –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–∑–∏–Ω–æ –∏ —Å–∞–π—Ç—ã 18+.
3. –õ–∏–º–∏—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî 2000 —Å–∏–º–≤–æ–ª–æ–≤.

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
"""
        await query.message.reply_text(help_text, reply_markup=help_menu_keyboard())

    elif query.data == 'restart':
        await query.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", reply_markup=main_menu_keyboard())

    elif query.data == 'back':
        await query.message.reply_text("–ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ?", reply_markup=main_menu_keyboard())
        return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
async def company_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    company_name = update.message.text
    context.user_data['company_name'] = company_name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=back_button_keyboard())
    return COMPANY_DESCRIPTION


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
async def company_description_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text
    context.user_data['description'] = description
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                                    reply_markup=back_button_keyboard())
    return COMPANY_WEBSITE


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
async def company_website_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    website = update.message.text

    if any(word in website.lower() for word in BANNED_WORDS):
        await update.message.reply_text(
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º –±–æ—Ç–∞.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END

    context.user_data['website'] = website
    await update.message.reply_text("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ.")
    await context.bot.send_message(
        chat_id=CHANNEL_ID,
        text=f"–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç {context.user_data['company_name']}!\n"
             f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['description']}\n"
             f"–°–∞–π—Ç: {website if website.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    )
    return ConversationHandler.END


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            COMPANY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, company_name_handler)],
            COMPANY_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, company_description_handler)],
            COMPANY_WEBSITE: [MessageHandler(filters.TEXT & ~filters.COMMAND, company_website_handler)],
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("start", start))

    await application.run_polling()


if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())

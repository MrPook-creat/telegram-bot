from telegram import Update, ForceReply, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes

# –®–∞–≥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
TITLE, DESCRIPTION, COMPANY, REQUIREMENTS, CONDITIONS, CONTACTS = range(6)


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåû",
        reply_markup=ForceReply(selective=True),
    )
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.",
        reply_markup=ReplyKeyboardMarkup(
            [["–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"]], one_time_keyboard=True, resize_keyboard=True
        )
    )
    return TITLE


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
async def receive_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['title'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
    return DESCRIPTION


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
async def receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['description'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    return COMPANY


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
async def receive_company(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['company'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º:")
    return REQUIREMENTS


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
async def receive_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['requirements'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:")
    return CONDITIONS


# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
async def receive_conditions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['conditions'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    return CONTACTS


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
async def receive_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['contacts'] = update.message.text

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    job_post = f"""
    –ó–∞–≥–æ–ª–æ–≤–æ–∫: {context.user_data['title']}
    –û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['description']}
    –ö–æ–º–ø–∞–Ω–∏—è: {context.user_data['company']}
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {context.user_data['requirements']}
    –£—Å–ª–æ–≤–∏—è: {context.user_data['conditions']}
    –ö–æ–Ω—Ç–∞–∫—Ç—ã: {context.user_data['contacts']}
    """

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
    CHANNEL_ID = "@zarabotoknaplyazhe"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –∫–∞–Ω–∞–ª–∞
    await context.bot.send_message(
        chat_id=CHANNEL_ID,
        text=f"–í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞:\n{job_post}"
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    app = ApplicationBuilder().token("8067972190:AAFMXMC7_Ki6YDml4UYJMsMJUu9DwQIU4fc").build()

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_title)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_description)],
            COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_company)],
            REQUIREMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_requirements)],
            CONDITIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_conditions)],
            CONTACTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_contacts)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(conv_handler)

    app.run_polling()  # –ú–µ—Ç–æ–¥ run_polling –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º


if __name__ == '__main__':
    main()
